[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "transfer.js/bin/transfer.js",
    "content": "#!/usr/bin/env node\n\nconst argv = require('minimist')(process.argv.slice(2), {\n  boolean: [\n    'copy-url',\n    'no-progress'\n  ],\n  string: [\n    'max-days',\n    'max-downloads',\n    'output',\n    'decrypt',\n    'password',\n    'file-name',\n    'download'\n  ],\n  alias: {\n    'help': 'h',\n    'version': 'v',\n    'max-days': 'm',\n    'max-downloads': 'M',\n    'output': 'o',\n    'decrypt': 'd',\n    'password': 'p',\n    'copy': 'c',\n    'file-name': 'n',\n    'no-progress': 'N',\n    'download': 'D'\n  }\n});\n\nconst cliProgress = require('cli-progress');\nconst clipboardy = require('clipboardy');\n\nconst Transfer = require('..');\nconst {name: pkg, version} = require('../package');\n\nconst bar = new cliProgress.Bar({\n  format: '{task}ing [{bar}] {percentage}%' +\n  ' | ETA: {eta_formatted} | {value}/{total}',\n  barsize: 30, fps: 2, etaBuffer: 4\n}, cliProgress.Presets.legacy);\n\nconst help = `\\\n  CLI tool for easy file sharing with https://transfer.sh\n\n  \\x1b[4mUsage\\x1b[0m\\n\n    $ transfer-js [FILE] [OPTIONS]\n\n  \\x1b[4mOptions\\x1b[0m\\n\n    -m, --max-days [NUMBER]       Maximum number of days.\n    -M, --max-downloads [NUMBER]  Maximum number of downloads.\n    -D, --download [URL]          Download file from URL.\n    -n, --file-name [NAME]        Name to use for the upload.\n    -p, --password [PASS]         Password used to encrypt the file.\n    -d, --decrypt [FILE]          Decrypt the file (requires --password).\n    -o, --output [PATH]           Decrypted/downloaded file output path.\n    -c, --copy                    Copy the file URL/path to the clipboard.\n    -N, --no-progress             Don't show the progress bar.\n    -v, --version                 Print the version and exit.\n    -h, --help                    Print this help text and exit.\n\n  \\x1b[4mExamples\\x1b[0m\\n\n    Upload file for 1 day with a custom name:\n      $ transfer-js file.txt -n file.tmp -m 1\n    Encrypt and upload file:\n      $ transfer-js file.txt -p p4ssw0rd\n    Download file:\n      $ transfer-js -D https://transfer.sh/I2ea5/file.txt\n    Decrypt file:\n      $ transfer-js -d file.enc -p p4ssw0rd\n`;\n\n/**\n * Error handler\n *\n * @function\n * @param {Error} err - The caught error\n */\nfunction catchError(err) {\n  if (err) {\n    if(!argv.N) bar.stop();\n    console.error(err.stack);\n    process.exit(1);\n  }\n}\n\n/**\n * File handler\n *\n * @function\n * @param {string} file - The URL or path of the file\n */\nfunction gotFile(file) {\n  if(!argv.N) {\n    bar.update(bar.total);\n    bar.stop();\n  }\n  console.log(file);\n  if(argv.c) {\n    clipboardy.write(file).then(() => {\n      console.log(' \\uD83D\\uDCCB Copied to the clipboard');\n    }).catch(catchError);\n  }\n}\n\n/**\n * Progress handler\n *\n * @function\n * @param {Object} prog - Progress details\n */\nfunction progressBar(prog) {\n  if(!argv.N) {\n    if(!bar.startTime) {\n      bar.start(prog.total, 0, {task: prog.task});\n    } else {\n      bar.update(prog.current);\n    }\n  }\n}\n\nif (argv.v) {\n  console.log(`${pkg} v${version}`);\n  process.exit(0);\n}\n\n/**\n * Identifies whether arguments were passed\n *\n * @constant\n * @protected\n * @type {boolean}\n */\nconst HAS_ARGS = (argv._.length > 0 && Object.keys(argv).length > 3);\n\nif(!HAS_ARGS) {\n  console.error(help);\n  process.exit(2);\n}\n\nif(argv.h) {\n  console.log(help);\n  process.exit(0);\n}\n\nconst opts = {\n  password: argv.p,\n  filename: argv.n\n};\nconst httpOpts = {\n  headers: {\n    'User-Agent': `${pkg}/${version}`\n  },\n  throwHttpErrors: true\n};\nif(argv.m) httpOpts.headers['Max-Days'] = argv.m;\nif(argv.M) httpOpts.headers['Max-Downloads'] = argv.M;\n\nif(argv.D) { // Download\n  new Transfer(argv.D, opts, httpOpts)\n    .download(argv.o)\n    .progress(progressBar)\n    .then(gotFile)\n    .catch(catchError);\n} else if(argv.d) { // Decrypt\n  if(!argv.p) catchError(new Error('No password provided'));\n  const ext = require('path').extname(argv.d);\n  let output = (!ext) ? `${argv.d}-decrypted` :\n    `${argv.d.replace(ext, '')}-decrypted${ext}`;\n  if(argv.o) output = argv.o;\n  new Transfer(argv.d, opts, httpOpts)\n    .decrypt(output)\n    .then(() => console.log('Successfully decrypted in', output))\n    .catch(catchError);\n} else { // Upload\n  for(const i in argv._) {\n    new Transfer(argv._[i], opts, httpOpts)\n      .upload()\n      .progress(progressBar)\n      .then(gotFile)\n      .catch(catchError);\n  }\n}\n\n",
    "static": true,
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/bin/transfer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "name": "argv",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~argv",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "name": "cliProgress",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~cliProgress",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "name": "clipboardy",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~clipboardy",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "name": "Transfer",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~Transfer",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "name": "name",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~name",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "name": "bar",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~bar",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "name": "help",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~help",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 8,
    "kind": "function",
    "name": "catchError",
    "memberof": "transfer.js/bin/transfer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transfer.js/bin/transfer.js~catchError",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": "Error handler",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "err",
        "description": "The caught error"
      }
    ]
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "gotFile",
    "memberof": "transfer.js/bin/transfer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transfer.js/bin/transfer.js~gotFile",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": "File handler",
    "lineNumber": 94,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The URL or path of the file"
      }
    ]
  },
  {
    "__docId__": 10,
    "kind": "function",
    "name": "progressBar",
    "memberof": "transfer.js/bin/transfer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transfer.js/bin/transfer.js~progressBar",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": "Progress handler",
    "lineNumber": 113,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "prog",
        "description": "Progress details"
      }
    ]
  },
  {
    "__docId__": 11,
    "kind": "variable",
    "name": "HAS_ARGS",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~HAS_ARGS",
    "access": "protected",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": "Identifies whether arguments were passed",
    "lineNumber": 135,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 12,
    "kind": "variable",
    "name": "opts",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~opts",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 13,
    "kind": "variable",
    "name": "httpOpts",
    "memberof": "transfer.js/bin/transfer.js",
    "static": true,
    "longname": "transfer.js/bin/transfer.js~httpOpts",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/bin/transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 14,
    "kind": "file",
    "name": "transfer.js/index.js",
    "content": "module.exports = require('./lib/Transfer').Transfer;\n\n",
    "static": true,
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "transfer.js/lib/Transfer.js",
    "content": "const fs = require('fs');\nconst path = require('path');\nconst got = require('got');\nconst crypt = require('crypto');\nconst through2 = require('through2');\nconst b64 = require('b64');\nconst block = require('block-stream2');\nconst eos = require('end-of-stream');\n\nconst {EOL, tmpdir} = require('os');\nconst {lookup: mime} = require('mime-types');\nconst {PassThrough: PassThroughStream} = require('stream');\n\n/** @external {ProgressPromise} https://www.npmjs.com/package/progress-promise */\nconst ProgressPromise = require('progress-promise');\n\n/**\n * The root domain (https://transfer.sh)\n *\n * @constant\n * @protected\n * @type {string}\n * @todo Make this configurable\n */\nconst DOMAIN = 'https://transfer.sh';\n\n/**\n * The algorithm used for encryption (aes-256-cbc)\n *\n * @constant\n * @protected\n * @type {string}\n */\nconst ALGORITHM = 'aes-256-cbc';\n\n/**\n * Class representing a Transfer Error\n *\n * @extends {Error}\n * @see <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a>\n */\nclass TransferError extends Error {\n  /**\n   * Error name (TransferError)\n   *\n   * @override\n   * @type {string}\n   */\n  get name() { return 'TransferError' }\n}\n\n/**\n * Error handler\n *\n * @private\n * @param {Error} error - The caught error\n * @param {string} file - The input file\n * @param {function} reject - Promise rejection\n */\nfunction __catchError(error, file, reject) {\n  let msg;\n  const filePath = path.resolve(file);\n  switch(error.code) {\n    case 'EACCESS':\n      msg = 'Cannot read file: ' + filePath;\n      reject(new TransferError(msg));\n      break;\n    case 'ENOENT':\n      msg = 'File not found: ' + filePath;\n      reject(new TransferError(msg));\n      break;\n    default:\n      reject(error);\n  }\n}\n\n/**\n * Class representing a Transfer\n *\n * @version 0.4.0\n */\nclass Transfer {\n  /**\n   * @typedef {Object} TransferOptions\n   * @property {string} [password] - The password used for encryption/decryption\n   * @property {string} [filename] - A custom filename for the upload\n   */\n\n  /**\n   * @param {string} fileInput - File path\n   * @param {TransferOptions} [options={}] - Transfer options\n   * @param {Object} [httpOptions={}] - HTTP options\n   */\n  constructor(fileInput, options={}, httpOptions={}) {\n    /**\n     * The input file path/URL\n     *\n     * @type {string}\n     */\n    this.fileInput = fileInput;\n    /** The transfer options object\n     *\n     * @type {TransferOptions}\n     */\n    this.options = options;\n    /** An HTTP options object\n     *\n     * @type {Object}\n     * @see <a href=\"https://nodejs.org/api/http.html#http_http_request_options_callback\">Node HTTP Options</a>\n     */\n    this.httpOptions = httpOptions;\n  }\n\n  get sEncrypt() {\n    return this.options.password ?\n      crypt.createCipher(ALGORITHM, this.options.password) :\n      new PassThroughStream();\n  }\n\n  get sDecrypt() {\n    return this.options.password ?\n      crypt.createDecipher(ALGORITHM, this.options.password) :\n      new PassThroughStream();\n  }\n\n  /**\n   * Adds <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a>\n   * header to the request\n   *\n   * @protected\n   * @since 0.4.0\n   * @param {Object} options - An HTTP options object\n   * @param {string} [file=null] - The input file\n   */\n  _contentType(options, file=null) {\n    if(!options.headers['Content-Type']) {\n      if(file !== null) {\n        options.headers['Content-Type'] =\n          mime(path.extname(file)) || 'text/plain';\n      } else {\n        options.headers['Content-Type'] =\n          'application/octet-stream';\n      }\n    }\n  }\n\n  /**\n   * Upload a file to {@link DOMAIN}\n   *\n   * @returns {ProgressPromise.<string|TransferError>} -\n   * The link if resolved, a TransferError if rejected\n   */\n  upload() {\n    const self = this;\n    const fileName = self.options.filename ||\n      path.basename(self.fileInput);\n    const fileURL = DOMAIN + '/' + fileName;\n    return new ProgressPromise((resolve, reject, progress) => {\n      if(!self.fileInput) reject(new TransferError('Missing file input'));\n      fs.stat(self.fileInput, (error, stats) => {\n        if(error) return __catchError(error, self.fileInput, reject);\n        const fileStream = fs.createReadStream(self.fileInput);\n        if(self.options.password) {\n          self.httpOptions.body = self._encrypt(fileStream);\n          self._contentType(self.httpOptions);\n        } else {\n          self.httpOptions.body = fileStream;\n          self._contentType(self.httpOptions, self.fileInput);\n        }\n        got.put(fileURL, self.httpOptions)\n          .on('uploadProgress', (p) => {\n            // The uploaded size is roughly 1.016 times larger\n            // than the actual size, likely due to the metadata\n            const curr = parseInt(p.transferred / 1.016 + 0.5);\n            progress({\n              current: (curr < stats.size) ? curr : stats.size,\n              total: stats.size,\n              task: 'Upload'\n            });\n          }).then((res) => resolve(res.body)).catch(reject);\n      });\n    });\n  }\n\n  /**\n   * Download a file from {@link DOMAIN}\n   *\n   * @function\n   * @param {string} destination - Destination path\n   * @returns {ProgressPromise.<string|TransferError>} -\n   * The path if resolved, a {@link TransferError} if rejected\n   * @todo Support decrypting\n   */\n  download(destination) {\n    const self = this;\n    const url = self.fileInput;\n    const filePath = destination || path.basename(url);\n    return new ProgressPromise((resolve, reject, progress) => {\n      if(!url) reject(new TransferError('Missing file URL'));\n      got.get(url, self.httpOptions)\n        .on('downloadProgress', p => {\n          progress({\n            current: p.transferred,\n            total: p.total,\n            task: 'Download'\n          });\n        }).then((res) => {\n          fs.writeFileSync(filePath, res.body);\n          resolve(path.resolve(filePath));\n        }).catch(reject);\n    });\n  }\n\n  /**\n   * Encrypt a file using {@link ALGORITHM} and base64\n   *\n   * @function\n   * @protected\n   * @param {ReadStream} inputStream - The file stream to encrypt\n   * @return {ReadStream} - The encrypted file stream\n   * @see <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">ReadStream</a>\n   */\n  _encrypt(inputStream) {\n    const tmpfile = path.join(tmpdir(),\n      Math.random().toString(16).substr(2));\n    inputStream.pipe(this.sEncrypt)\n      .pipe(new b64.Encoder())\n      .pipe(block({size: 76, zeroPadding: false}))\n      .pipe(fs.createWriteStream(tmpfile));\n    return fs.createReadStream(tmpfile);\n  }\n\n  /**\n   * Decrypt a file encrypted with {@link Transfer#_encrypt}\n   *\n   * @function\n   * @param {string} destination - Destination path\n   * @returns {Promise.<WriteStream|TransferError>} -\n   * A WriteStream of the decrypted file if resolved,\n   * a TransferError if rejected\n   * @see <a href=\"https://nodejs.org/api/stream.html#stream_class_stream_writable\">WriteStream</a>\n   */\n  decrypt(destination) {\n    const self = this;\n    return new Promise((resolve, reject) => {\n      if(!destination)\n        reject(new TransferError('Missing decrypted file destination'));\n      const wStream = fs.createWriteStream(destination);\n      eos(wStream, (err) => {\n        if(err) return reject(err);\n        resolve(this);\n      });\n      try {\n        // Start decryption\n        fs.createReadStream(self.fileInput)\n          .pipe(new b64.Decoder())\n          .pipe(self.sDecrypt)\n          .pipe(wStream);\n      } catch(error) {\n        return __catchError(error, self.fileInput, reject);\n      }\n    });\n  }\n}\n\nmodule.exports = {Transfer, TransferError};\n\n",
    "static": true,
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/lib/Transfer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "variable",
    "name": "fs",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~fs",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 17,
    "kind": "variable",
    "name": "path",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~path",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 2,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 18,
    "kind": "variable",
    "name": "got",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~got",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 19,
    "kind": "variable",
    "name": "crypt",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~crypt",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 20,
    "kind": "variable",
    "name": "through2",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~through2",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "b64",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~b64",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 22,
    "kind": "variable",
    "name": "block",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~block",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "name": "eos",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~eos",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 24,
    "kind": "variable",
    "name": "EOL",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~EOL",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 25,
    "kind": "variable",
    "name": "lookup",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~lookup",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 26,
    "kind": "variable",
    "name": "PassThrough",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~PassThrough",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "ProgressPromise",
    "externalLink": "https://www.npmjs.com/package/progress-promise",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~ProgressPromise",
    "access": "public",
    "description": null,
    "lineNumber": 15
  },
  {
    "__docId__": 28,
    "kind": "variable",
    "name": "DOMAIN",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~DOMAIN",
    "access": "protected",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": "The root domain (https://transfer.sh)",
    "lineNumber": 25,
    "todo": [
      "Make this configurable"
    ],
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 29,
    "kind": "variable",
    "name": "ALGORITHM",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~ALGORITHM",
    "access": "protected",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": "The algorithm used for encryption (aes-256-cbc)",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@constant",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 30,
    "kind": "class",
    "name": "TransferError",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~TransferError",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": "Class representing a Transfer Error",
    "see": [
      "<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\">Error</a>"
    ],
    "lineNumber": 42,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 31,
    "kind": "get",
    "name": "name",
    "memberof": "transfer.js/lib/Transfer.js~TransferError",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~TransferError#name",
    "access": "public",
    "description": "Error name (TransferError)",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    },
    "override": true
  },
  {
    "__docId__": 32,
    "kind": "function",
    "name": "__catchError",
    "memberof": "transfer.js/lib/Transfer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~__catchError",
    "access": "private",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": "Error handler",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Error"
        ],
        "spread": false,
        "optional": false,
        "name": "error",
        "description": "The caught error"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The input file"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "reject",
        "description": "Promise rejection"
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 33,
    "kind": "class",
    "name": "Transfer",
    "memberof": "transfer.js/lib/Transfer.js",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~Transfer",
    "access": "public",
    "export": false,
    "importPath": "transfer.js/transfer.js/lib/Transfer.js",
    "importStyle": null,
    "description": "Class representing a Transfer",
    "lineNumber": 82,
    "version": "0.4.0",
    "interface": false
  },
  {
    "__docId__": 34,
    "kind": "typedef",
    "name": "TransferOptions",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "static": true,
    "longname": "transfer.js/lib/Transfer.js~Transfer.TransferOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "password",
        "description": "The password used for encryption/decryption"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "filename",
        "description": "A custom filename for the upload"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TransferOptions"
    }
  },
  {
    "__docId__": 35,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "fileInput",
        "description": "File path"
      },
      {
        "nullable": null,
        "types": [
          "TransferOptions"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "Transfer options"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "httpOptions",
        "description": "HTTP options"
      }
    ]
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "fileInput",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#fileInput",
    "access": "public",
    "description": "The input file path/URL",
    "lineNumber": 100,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "options",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#options",
    "access": "public",
    "description": "The transfer options object",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "TransferOptions"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "httpOptions",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#httpOptions",
    "access": "public",
    "description": "An HTTP options object",
    "see": [
      "<a href=\"https://nodejs.org/api/http.html#http_http_request_options_callback\">Node HTTP Options</a>"
    ],
    "lineNumber": 111,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 39,
    "kind": "get",
    "name": "sEncrypt",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#sEncrypt",
    "access": "public",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 40,
    "kind": "get",
    "name": "sDecrypt",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#sDecrypt",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "ignore": true
  },
  {
    "__docId__": 41,
    "kind": "method",
    "name": "_contentType",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#_contentType",
    "access": "protected",
    "description": "Adds <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Type\">Content-Type</a>\nheader to the request",
    "lineNumber": 135,
    "since": "0.4.0",
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "An HTTP options object"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "file",
        "description": "The input file"
      }
    ]
  },
  {
    "__docId__": 42,
    "kind": "method",
    "name": "upload",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#upload",
    "access": "public",
    "description": "Upload a file to {@link DOMAIN}",
    "lineNumber": 153,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{ProgressPromise.<string|TransferError>} -\nThe link if resolved, a TransferError if rejected"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProgressPromise.<string|TransferError>"
      ],
      "spread": false,
      "description": "The link if resolved, a TransferError if rejected"
    }
  },
  {
    "__docId__": 43,
    "kind": "method",
    "name": "download",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#download",
    "access": "public",
    "description": "Download a file from {@link DOMAIN}",
    "lineNumber": 194,
    "todo": [
      "Support decrypting"
    ],
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{ProgressPromise.<string|TransferError>} -\nThe path if resolved, a {@link TransferError} if rejected"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ProgressPromise.<string|TransferError>"
      ],
      "spread": false,
      "description": "The path if resolved, a {@link TransferError} if rejected"
    }
  },
  {
    "__docId__": 44,
    "kind": "method",
    "name": "_encrypt",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#_encrypt",
    "access": "protected",
    "description": "Encrypt a file using {@link ALGORITHM} and base64",
    "see": [
      "<a href=\"https://nodejs.org/api/stream.html#stream_class_stream_readable\">ReadStream</a>"
    ],
    "lineNumber": 223,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ReadStream"
        ],
        "spread": false,
        "optional": false,
        "name": "inputStream",
        "description": "The file stream to encrypt"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ReadStream"
      ],
      "spread": false,
      "description": "The encrypted file stream"
    }
  },
  {
    "__docId__": 45,
    "kind": "method",
    "name": "decrypt",
    "memberof": "transfer.js/lib/Transfer.js~Transfer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "transfer.js/lib/Transfer.js~Transfer#decrypt",
    "access": "public",
    "description": "Decrypt a file encrypted with {@link Transfer#_encrypt}",
    "see": [
      "<a href=\"https://nodejs.org/api/stream.html#stream_class_stream_writable\">WriteStream</a>"
    ],
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@function",
        "tagValue": ""
      },
      {
        "tagName": "@returns",
        "tagValue": "{Promise.<WriteStream|TransferError>} -\nA WriteStream of the decrypted file if resolved,\na TransferError if rejected"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "destination",
        "description": "Destination path"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise.<WriteStream|TransferError>"
      ],
      "spread": false,
      "description": "A WriteStream of the decrypted file if resolved,\na TransferError if rejected"
    }
  },
  {
    "kind": "index",
    "content": "# transfer.js\n\n[![Version](https://img.shields.io/npm/v/transfer.js.svg)](https://www.npmjs.com/package/transfer.js)\n[![Build Status](https://img.shields.io/travis/ObserverOfTime/transfer.js.svg)](https://travis-ci.org/ObserverOfTime/transfer.js)\n[![License](https://img.shields.io/badge/license-ISC-blue.svg)](./LICENSE)\n[![Coverage](https://coveralls.io/repos/github/ObserverOfTime/transfer.js/badge.svg?branch=master)](https://coveralls.io/github/ObserverOfTime/transfer.js?branch=master)\n\nNode.js CLI tool for easy file sharing with [transfer.sh](https://transfer.sh)\n\n## Install\n\nThe easiest way to get **transfer.js** is with npm or yarn:\n\n```sh\n$ npm install -g transfer.js\n$ yarn global add transfer.js\n```\n\n## CLI Usage\n\n### Example\n\n```sh\n$ transfer-js hello.txt --copy\n```\n\nWill return a link to the resource and copy it to your clipboard.\n\n### Options\n\n|        Option         |                        Description                        |\n| :-------------------: | :-------------------------------------------------------: |\n|   `-m, --max-days`    | Maximum number of days the file will stay on transfer.sh. |\n| `-M, --max-downloads` |           Maximum number of downloads allowed.            |\n|   `-D, --download`    |           Download the file from the given URL.           |\n|   `-n, --file-name`   |                Name to use for the upload.                |\n|     `-c, --copy`      |        Copy the file URL or path to the clipboard.        |\n|  `-N, --no-progress`  |               Don't show the progress bar.                |\n|   `-p, --password`    |            Password used to encrypt the file.             |\n|    `-d, --decrypt`    |         Decrypt the file (requires `--password`).         |\n|    `-o, --output`     |     Output path of the decrypted or downloaded file.      |\n\n## Module usage\n\n### Example\n\n```javascript\nconst Transfer = require('transfer.js');\n\n// Encrypt and upload\nnew Transfer('./Hello.txt', {password: 's3cr3t', filename: 'Hello.enc'})\n  .upload().progress(function(prog) {\n    console.log(prog.current / prog.total * 100).toFixed(1) + '%');\n  }).then(function(link) { console.log(link) })\n  .catch(function(err) { console.error(err) });\n\n// Download\nnew Transfer('https://transfer.sh/4bcD3/Hello.enc')\n  .download().progress(function(prog) {\n    console.log(prog.current / prog.total * 100).toFixed(1) + '%');\n  }).then(function(path) { console.log(path) })\n  .catch(function(err) { console.error(err) });\n\n// Decrypt\nnew Transfer('./Hello.enc', {password: 's3cr3t'})\n  .decrypt('Output.md')\n  .then(function(wStream) { console.log('Decrypted!') })\n  .catch(function(err) { console.error(err) });\n\n```\n\n### Options\n\n|   Option   |                         Description                          |\n| :--------: | :----------------------------------------------------------: |\n| `filename` | If provided, the upload will use the provided name.<br>Otherwise, it will use the original name. |\n| `password` | If provided, the file will be encrypted with `aes-256-cbc`<br>and encoded as base64 before the upload. |\n\n## Documentation\n\nThe documentation is available [here](https://observeroftime.github.io/transfer.js).\n\n## Dependencies [![Dependencies](https://img.shields.io/david/ObserverOfTime/transfer.js.svg)](https://david-dm.org/ObserverOfTime/transfer.js)\n\n- [b64](https://ghub.io/b64): Base64 streaming encoder and decoder\n- [block-stream2](https://ghub.io/block-stream2): transform input into equally-sized blocks of output\n- [cli-progress](https://ghub.io/cli-progress): Easy to use Progress-Bar for Command-Line/Terminal Applications\n- [clipboardy](https://ghub.io/clipboardy): Access the system clipboard (copy/paste)\n- [end-of-stream](https://ghub.io/end-of-stream): Call a callback when a readable/writable/duplex stream has completed or failed.\n- [got](https://ghub.io/got): Simplified HTTP requests\n- [mime-types](https://ghub.io/mime-types): The ultimate javascript content-type utility.\n- [minimist](https://ghub.io/minimist): parse argument options\n- [progress-promise](https://ghub.io/progress-promise): Promise subclass with mechanism to report progress before resolving\n- [through2](https://ghub.io/through2): A tiny wrapper around Node streams2 Transform to avoid explicit subclassing noise\n\n## Dev Dependencies [![Dev Dependencies](https://img.shields.io/david/dev/ObserverOfTime/transfer.js.svg)](https://david-dm.org/ObserverOfTime/transfer.js?type=dev)\n\n- [chai](https://ghub.io/chai): BDD/TDD assertion library for node.js and the browser. Test framework agnostic.\n- [chai-as-promised](https://ghub.io/chai-as-promised): Extends Chai with assertions about promises.\n- [coveralls](https://ghub.io/coveralls): takes json-cov output into stdin and POSTs to coveralls.io\n- [esdoc](https://ghub.io/esdoc): Good Documentation Generator For JavaScript\n- [esdoc-accessor-plugin](https://ghub.io/esdoc-accessor-plugin): A accessor plugin for ESDoc\n- [esdoc-integrate-test-plugin](https://ghub.io/esdoc-integrate-test-plugin): A integrate test plugin for ESDoc\n- [esdoc-publish-html-plugin](https://ghub.io/esdoc-publish-html-plugin): A publish HTML plugin for ESDoc\n- [esdoc-undocumented-identifier-plugin](https://ghub.io/esdoc-undocumented-identifier-plugin): A undocumented identifier plugin for ESDoc\n- [eslint](https://ghub.io/eslint): An AST-based pattern checker for JavaScript.\n- [mocha](https://ghub.io/mocha): simple, flexible, fun test framework\n- [nyc](https://ghub.io/nyc): the Istanbul command line interface\n\n## TODO\n\n- Support decrypting after download\n- Add more options to the executable\n- Use a better argument parser\n- Allow custom transfer domains\n- Add more download tests\n\n## Credits\n\nBased on [transfer-sh](https://ghub.io/transfer-sh) by roccomuso.\n\n",
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"transfer.js\",\n  \"version\": \"0.4.0\",\n  \"description\": \"Fork of transfer-sh, a CLI tool for easy file sharing with https://transfer.sh\",\n  \"main\": \"./index.js\",\n  \"files\": [\n    \"bin/\",\n    \"lib/\"\n  ],\n  \"preferGlobal\": true,\n  \"bin\": {\n    \"transfer-js\": \"./bin/transfer.js\"\n  },\n  \"scripts\": {\n    \"cover\": \"nyc report -r text-lcov | coveralls\",\n    \"docs\": \"nyc report -r html; esdoc -c .esdoc.json\",\n    \"lint\": \"eslint bin/*.js lib/*.js tests/*.js\",\n    \"test\": \"nyc -r text-summary mocha -t 5000 tests/test.js --exit\"\n  },\n  \"repository\": \"git+https://github.com/ObserverOfTime/transfer.js.git\",\n  \"keywords\": [\n    \"transfer\",\n    \"transfer.sh\",\n    \"wrapper\",\n    \"cli\",\n    \"upload\",\n    \"file\",\n    \"sharing\"\n  ],\n  \"author\": \"ObserverOfTime <chronobserver@disroot.org>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ObserverOfTime/transfer.js/issues\"\n  },\n  \"homepage\": \"https://observeroftime.github.io/transfer.js\",\n  \"dependencies\": {\n    \"b64\": \"^4.0.0\",\n    \"block-stream2\": \"^1.1.0\",\n    \"cli-progress\": \"^2.0.0\",\n    \"clipboardy\": \"^1.2.3\",\n    \"end-of-stream\": \"^1.4.1\",\n    \"got\": \"^9.2.1\",\n    \"mime-types\": \"^2.1.20\",\n    \"minimist\": \"^1.2.0\",\n    \"progress-promise\": \"^0.0.6\",\n    \"through2\": \"^2.0.3\"\n  },\n  \"devDependencies\": {\n    \"chai\": \"^4.1.2\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"coveralls\": \"^3.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-accessor-plugin\": \"^1.0.0\",\n    \"esdoc-integrate-test-plugin\": \"^1.0.0\",\n    \"esdoc-publish-html-plugin\": \"^1.1.2\",\n    \"esdoc-undocumented-identifier-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.1.0\",\n    \"mocha\": \"^5.2.0\",\n    \"nyc\": \"^13.0.1\"\n  },\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"lines\": 80,\n    \"statements\": 80,\n    \"functions\": 80,\n    \"branches\": 70,\n    \"include\": [\"lib/*.js\"],\n    \"ignore-class-method\": \"_encrypt\",\n    \"report-dir\": \"./docs/coverage\",\n    \"cache\": true\n  }\n}\n",
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 46,
    "kind": "testFile",
    "name": "tests/test.js",
    "content": "const path = require('path');\nconst fs = require('fs');\n\nconst {describe, it} = require('mocha');\nconst {expect, use, should} = require('chai');\n\nconst {Transfer, TransferError} = require('../lib/Transfer');\nconst {name: pkg, version} = require('../package');\n\nuse(require('chai-as-promised'));\nshould();\n\n/** @test {Transfer} */\ndescribe('Testing Transfer', () => {\n  let downloadURL;\n  const file = 'tests/test.txt';\n  const regex = '^https://transfer\\\\.sh/.+/';\n  const userAgent = `${pkg}-tester/${version}`;\n  const httpOpts = {\n    headers: {\n      'User-Agent': userAgent,\n      'Max-Days': 1\n    },\n    throwHttpErrors: true\n  };\n\n  /** @test {Transfer#upload} */\n  it('succesful upload', () => {\n    const transfer = new Transfer(file, {}, httpOpts);\n    return expect(transfer.upload()).to.eventually\n      .match(new RegExp(regex + path.basename(file)));\n  });\n\n  /** @test {Transfer#upload} */\n  it('successful upload: custom name', () => {\n    const opts = {filename: 'test.md'};\n    const transfer = new Transfer(file, opts, httpOpts);\n    return expect(transfer.upload()).to.eventually\n      .match(new RegExp(regex + opts.filename));\n  });\n\n  /** @test {Transfer#upload} */\n  it('succesful upload: progress', (done) => {\n    let progressTotal, progressCount = 0;\n    const transfer = new Transfer(file, {}, httpOpts);\n    return transfer.upload().progress((prog) => {\n      progressCount = prog.current;\n      progressTotal = prog.total;\n    }).then((url) => {\n      downloadURL = url; // Save URL to download later\n      progressCount.should.equal(progressTotal);\n    }).should.notify(done);\n  });\n\n  /** @test {Transfer#upload} */\n  it('successful upload: encrypted', () => {\n    const opts = {password: 't3st'};\n    const transfer = new Transfer(file, opts, httpOpts);\n    return transfer.upload().should.be.fulfilled;\n  });\n\n  /** @test {Transfer#download} */\n  it('successful download', () => {\n    const transfer = new Transfer(downloadURL, {}, httpOpts);\n    return transfer.download(file).should.be.fulfilled;\n  });\n\n  /** @test {Transfer#decrypt} */\n  it('successful decryption', (done) => {\n    const opts = {password: 't3st'};\n    const enc = 'tests/test.enc';\n    const transfer = new Transfer(enc, opts, httpOpts);\n    return transfer.decrypt(file).should.be.fulfilled\n      .then(() => {\n        fs.readFileSync(file).asciiSlice()\n          .should.equal('Decrypted\\n');\n      }).should.notify(done);\n  });\n\n  /** @test {Transfer#upload} */\n  it('failed upload: no file provided', () => {\n    const transfer = new Transfer('', {}, httpOpts);\n    return transfer.upload().should.be\n      .rejectedWith(TransferError, 'Missing file input');\n  });\n\n  /** @test {Transfer#upload} */\n  it('failed upload: non-existent file', () => {\n    const transfer = new Transfer('non-existent', {}, httpOpts);\n    const filePath = path.resolve('non-existent');\n    return transfer.upload().should.be\n      .rejectedWith(TransferError, 'File not found: ' + filePath);\n  });\n});\n\n",
    "static": true,
    "longname": "/home/johan/Documents/Code/GitHub/transfer.js/tests/test.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 47,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "tests/test.js",
    "testDepth": 0,
    "static": true,
    "longname": "tests/test.js~describe0",
    "access": null,
    "description": "Testing Transfer",
    "lineNumber": 14,
    "testTargets": [
      "Transfer"
    ]
  },
  {
    "__docId__": 48,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it1",
    "access": null,
    "description": "succesful upload",
    "lineNumber": 28,
    "testTargets": [
      "Transfer#upload"
    ]
  },
  {
    "__docId__": 49,
    "kind": "test",
    "name": "it2",
    "testId": 2,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it2",
    "access": null,
    "description": "successful upload: custom name",
    "lineNumber": 35,
    "testTargets": [
      "Transfer#upload"
    ]
  },
  {
    "__docId__": 50,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it3",
    "access": null,
    "description": "succesful upload: progress",
    "lineNumber": 43,
    "testTargets": [
      "Transfer#upload"
    ]
  },
  {
    "__docId__": 51,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it4",
    "access": null,
    "description": "successful upload: encrypted",
    "lineNumber": 56,
    "testTargets": [
      "Transfer#upload"
    ]
  },
  {
    "__docId__": 52,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it5",
    "access": null,
    "description": "successful download",
    "lineNumber": 63,
    "testTargets": [
      "Transfer#download"
    ]
  },
  {
    "__docId__": 53,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it6",
    "access": null,
    "description": "successful decryption",
    "lineNumber": 69,
    "testTargets": [
      "Transfer#decrypt"
    ]
  },
  {
    "__docId__": 54,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it7",
    "access": null,
    "description": "failed upload: no file provided",
    "lineNumber": 81,
    "testTargets": [
      "Transfer#upload"
    ]
  },
  {
    "__docId__": 55,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "tests/test.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "tests/test.js~describe0.it8",
    "access": null,
    "description": "failed upload: non-existent file",
    "lineNumber": 88,
    "testTargets": [
      "Transfer#upload"
    ]
  }
]